(lambda () (+ 1 2))

(lambda (x) (+ x 4))
((lambda (x) (+ x 4)) 5)

((lambda (x) (+ x 4) (* 2 x) ) 5)

((lambda (x) (+ x 4) (* (+ 1 x) x) ) 5)

((lambda (x y) (+ x y)) 5 6)

((lambda (x y z) (* x y z)) 5 6 2)


((lambda (x y z) (* (+ x 1) (+ y 1) (+ z 1))) 1 2 3)

(define (aa) 5)
(define bb 6)
(define plus4 (lambda (x) (+ x 4)))
(define (plus4 x) (+ 4 x))

cons, car, cdr test
(cons 1 2 3) => get error
(cons 1 2)
(car (cons 1 2))
(cdr (quote (1 2)) (quote (3 4))) => error
(cdr (quote (1 2)))

(list 1 2 3 4)
(car (list 1 2 3 4))
(cdr (list 1 2 3 4))



(if (< 1 0) -1 1)
(if (< 0 1) -1 1)

(if (< 0 1) (+ 1 2) (* 2 3))
(if (< 2 1) (+ 1 2) (* 2 3))

(define (addx x) (lambda (y) (+ y x)))
(define add8 (addx 8))
(add8 100)

(define f (lambda (x) (lambda (y) (+ x y)) ) )     (define add8 (f 8))

((lambda (x) (lambda (y) (+ x y)) ) 8)

// use the example to explain environment.
(define (aa x) (lambda (y) (+ x y)))

(define aa (lambda (x) (lambda (y) (+ x y))))

result:
( ( x ,  ()  ) ( ( lambda , ( ( y ,  ()  ) ( ( + , ( x , ( y ,  ()  )  )  )  ()  )  )  )  ()  )  ) 
env name: global


(define aax (aa 5))

reult:
( ( y ,  ()  ) ( ( + , ( x , ( y ,  ()  )  )  )  ()  )  ) 
env name: e0
env name: global

(aax 6)

(define (aax 5)) // this should be wrong, but in my implementation is passed.


(define pp ((lambda (x) (lambda (y) (+ x y)) ) 8))

(begin (+ 1 2) (* 5 6))

(cond ((< 0 1) (+ 1 2)) ((> 2 1) (+ 3 5)) (else (+ 8 9)))

(cond ((< 0 1) (+ 1 2)) ((> 2 1) (+ 3 5)) (else (+ 8 9)))
(cond ((< 0 1) (+ 1 2) (* 3 5)) ((> 2 1) (+ 3 5)))

(cond ((> 0 1) (+ 1 2)) ((< 2 1) (+ 3 5)) (else (+ 8 9)))

(cond ((> 0 1) (+ 1 2)) ((< 2 1) (+ 3 5)) (else (+ 8 9) (* 1 2) ))

(define aa 77)
(set! aa (+ 2 5))
(set! aa 5)

(define (factorial n) (if (= n 1) 1 (* n (factorial (- n 1)))))
(factorial 5)
(factorial 6)

(define (f n) (if (= n 1) 1 (* n (f (- n 1)))))
